from setup import VERSION

from miscSupports import validate_path
from pathlib import Path


def sbatch_headers(file, script_name, partition, nodes, task_per_node, cpus, time, memory):
    """
    Write Sbatch headers
    """
    sbatch_commands = ["job-name", "partition", "nodes", "ntasks-per-node", "cpus-per-task", "time"]
    sbatch_variable = [script_name, partition, nodes, task_per_node, cpus, time]
    for command, variable in zip(sbatch_commands, sbatch_variable):
        file.write(f"#SBATCH --{command}={variable}\n")
    file.write(f"#SBATCH --mem={memory}\n\n")


def plink_clump(script_write_path, script_name, plink_path, bed_file_path, summary_stat_path, out_name,
                plink_version="plink", partition="test", nodes=1, task_per_node=1, cpus=1, time="0:10:00",
                memory="10000M", clump_p1=1, clump_p2=1, clump_r2=0.001, clump_kb=10000, snp_field="SNP", p_field="P",
                threads=1):
    """
    Create a script for clumping with plink 1.90

    :param script_write_path: Where you want the script to be saved
    :param script_name: Name of the script, will also be used as the job name for sbatch
    :param plink_path: Path to plink install folder
    :param bed_file_path: path to a .bed file without its extension, with its .bim and .fam in the same directory
    :param summary_stat_path: path to summary stats
    :param out_name: Name of clumped file
    :param plink_version: version of plink, should be plink unless you are using 2.00 or later in which case plink2
    :param partition: defaults to test, change if required based on the partitions on the sever
    :param nodes: compute nodes, defaults to 1
    :param task_per_node: tasks per node, defaults to 1
    :param cpus: cpus per task, defaults to 1
    :param time: hours : minutes : seconds; time, defaults to 10 minutes
    :param memory: Memory in mb, must have trailing M, defaults to 10GB
    :param clump_p1: Clumping sig level for index SNPs, defaults to 1
    :param clump_p2: Clumping sig level for secondary SNPs, defaults to 1
    :param clump_r2: Clumping r2 cutoff, default is 0.001
    :param clump_kb: Clump window, default is 10,000kb
    :param snp_field: Field in summary stat file that contains the variant Id's, defaults to SNP
    :param p_field: Field in summary stat file that contains the p values, defaults to P
    :param threads: Number of threads to use, defaults to 1
    :return: Nothing, write file then stop
    """

    # Create a file instance
    file = open(Path(validate_path(script_write_path), f"{script_name}.sh"), "w")
    file.write("#!/bin/bash\n\n")
    file.write(f"# Generated by pyGenicCT Version: {VERSION}\n")

    # Setup the slurm submission script headers
    sbatch_headers(file, script_name, partition, nodes, task_per_node, cpus, time, memory)

    # Set plink path
    file.write(f"module load {plink_path}\n\n")

    # Create plink clump command
    file.write(f"{plink_version} \\\n")

    command_list = ["bfile", "clump-p1", "clump-p2", "clump-r2", "clump-kb", "clump", "clump-snp-field", "clump-field",
                    "out"]
    variable_list = [bed_file_path, clump_p1, clump_p2, clump_r2, clump_kb, summary_stat_path, snp_field, p_field,
                     out_name]
    for command, variable in zip(command_list, variable_list):
        file.write(f"\t--{command} {variable} \\\n")
    file.write(f"\t--threads {threads}\n")

    # todo sbatch extract results when this finishes


def extract_results(script_write_path, script_name, summary_name, clump_name, summary_snp, summary_effect, summary_p,
                    clump_snp=1, clump_chromosome=3,
                    partition="test", nodes=1, task_per_node=1, cpus=1, time="0:10:00", memory="10000M"):
    """
    Extract the results from clumping

    :param script_write_path: Where you want the script to be saved
    :param script_name: Name of the script, will also be used as the job name for sbatch
    :param summary_name: path to summary stats
    :param clump_name: Name of the clump file
    :param summary_snp: Snp column of summary statistics
    :param summary_effect: Effect column of summary statistics
    :param summary_p: P column of summary statistics
    :param clump_snp: Snp column of clump file, defaults to 1
    :param clump_chromosome: Snp column of clump file, defaults to 3
    :param partition: defaults to test, change if required based on the partitions on the sever
    :param nodes: compute nodes, defaults to 1
    :param task_per_node: tasks per node, defaults to 1
    :param cpus: cpus per task, defaults to 1
    :param time: hours : minutes : seconds; time, defaults to 10 minutes
    :param memory: Memory in mb, must have trailing M, defaults to 10GB
    :return:
    """

    # Create a file instance
    file = open(Path(validate_path(script_write_path), f"{script_name}.sh"), "w")
    file.write("#!/bin/bash\n\n")
    file.write(f"# Generated by pyGenicCT Version: {VERSION}\n")

    # Setup the slurm submission script headers
    sbatch_headers(file, script_name, partition, nodes, task_per_node, cpus, time, memory)

    # Extract the chromosome level snps
    file.write("awk '{print $%s,$%s}' %s > SNP.valid\n\n" % (clump_snp, clump_chromosome, clump_name))
    file.write("awk '{print $%s,$%s,$%s}' %s > SNP.values\n" % (summary_snp, summary_effect, summary_p, summary_name))
